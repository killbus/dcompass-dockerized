name: Publish Docker Image

on:
  push:
    branches: 
      - main
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 0 */3 * *"
  workflow_dispatch:


jobs:
  multi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Dependencies
        run: |
          sudo apt install curl jq -y --no-install-recommends
      - name: Get dcompass latest version
        id: latest_version
        run: |
          version=$(curl -LSs https://api.github.com/repos/LEXUGE/dcompass/releases?per_page=100 | jq -r '[.[] | select((.assets | length > 0))] | first | .tag_name')
          version=$(echo ${version##v})
          echo "result=${version}" >> $GITHUB_OUTPUT
      - name: Get dcompass latest release version
        id: latest_release_version
        run: |
          version=$(curl -LSs https://api.github.com/repos/LEXUGE/dcompass/releases?per_page=100 | jq -r '[.[] | select((.assets | length > 0) and (.prerelease==false))] | first | .tag_name')
          version=$(echo ${version##v})
          echo "result=${version}" >> $GITHUB_OUTPUT
      - name: Check whether the latest version is prerelease
        id: the_latest_is_prerelease
        run: |
          latest_version=${{ steps.latest_version.outputs.result }}
          latest_release_version=${{ steps.latest_release_version.outputs.result }}
          the_latest_is_prerelease=1
          if [ "$latest_version" = "$latest_release_version" ]; then the_latest_is_prerelease=0; fi
          echo "the_latest_is_prerelease=$the_latest_is_prerelease" >> $GITHUB_OUTPUT
      - name: Get The Dcompass Latest Release Target Commitish
        id: dcompass_latest_target_ommitish
        env:
          VERSION: ${{ secrets.VERSION }}
        run: |
          target_commitish=$(curl -LSs 'https://api.github.com/repos/LEXUGE/dcompass/releases/latest' | jq -r '.target_commitish')
          ${{ env.VERSION == '' }} || ${{ env.VERSION == 'latest' }} && echo "target_commitish=$target_commitish" >> $GITHUB_OUTPUT
      - name: Set docker image tags
        id: docker_tags
        run: |
          latest_version=${{ steps.latest_version.outputs.result }}
          special_version=${{ secrets.VERSION }}
          version=${special_version:-$latest_version}
          version_tags="${{ secrets.DOCKERHUB_USERNAME }}/dcompass:$version,ghcr.io/${{ github.actor }}/dcompass:$version"
          tags_with_latest="$version_tags,${{ secrets.DOCKERHUB_USERNAME }}/dcompass:latest,ghcr.io/${{ github.actor }}/dcompass:latest"
          tags=$version_tags
          if [ -z "$special_version" ] || [ "$latest_version" == "$special_version" ]; then tags=$tags_with_latest; fi
          echo "result=$tags" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,arm
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      # Setup the Github Actions cache.
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildxarch-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildxarch-
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Github Package
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: $GITHUB_ACTOR
          password: ${{ secrets.PACKAGE_TOKEN }}
      # the arm64 is of course much slower due to qemu, so build and push amd64 **first**
      # due to the way manifests work, the gap between this and the complete push below
      #  could result in pull failures or inconsistencies for arm64, such is life.
      # further duplicated by building both release and debug builds
      - name: Build and push amd64 Release Docker Image to DockerHub and Github docker registry
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_tags.outputs.result }}
          build-args: |
            VERSION=${{ secrets.VERSION }}
            DCOMPASS_TARGET_COMMITISH=${{ steps.dcompass_latest_target_ommitish.outputs.target_commitish }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # first run does not export the cache

      # Do it all again with both archs. the amd64 will be a huge cache hit
      # this will update the manifest have both arches
      - name: Build and push multiarch Release Docker Image to DockerHub and Github docker registry
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/arm64,linux/arm/v7,linux/amd64
          push: true
          tags: ${{ steps.docker_tags.outputs.result }}
          build-args: |
            VERSION=${{ secrets.VERSION }}
            DCOMPASS_TARGET_COMMITISH=${{ steps.dcompass_latest_target_ommitish.outputs.target_commitish }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      # Build latest non-prerelease
      - name: Build and push amd64 PreRelease Docker Image to DockerHub and Github docker registry
        if: steps.the_latest_is_prerelease.outputs.result == 1
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dcompass:${{ steps.latest_release_version.outputs.result }}
            ghcr.io/${{ github.actor }}/dcompass:${{ steps.latest_release_version.outputs.result }}
          build-args: |
            PRERELEASE=1
            VERSION=${{ steps.latest_release_version.outputs.result }}
            DCOMPASS_TARGET_COMMITISH=${{ steps.dcompass_latest_target_ommitish.outputs.target_commitish }}
          cache-from: type=local,src=/tmp/.buildx-cache-release
          # first run does not export the cache

      # Do it all again with both archs. the amd64 will be a huge cache hit
      # this will update the manifest have both arches
      - name: Build and push multiarch PreRelease Docker Image to DockerHub and Github docker registry
        if: steps.the_latest_is_prerelease.outputs.result == 1
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/arm64,linux/arm/v7,linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dcompass:${{ steps.latest_release_version.outputs.result }}
            ghcr.io/${{ github.actor }}/dcompass:${{ steps.latest_release_version.outputs.result }}
          build-args: |
            PRERELEASE=1
            VERSION=${{ steps.latest_release_version.outputs.result }}
            DCOMPASS_TARGET_COMMITISH=${{ steps.dcompass_latest_target_ommitish.outputs.target_commitish }}
          cache-from: type=local,src=/tmp/.buildx-cache-release
          cache-to: type=local,dest=/tmp/.buildx-cache-release
